{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/howmakesearvhmicroservice.jpg","path":"images/howmakesearvhmicroservice.jpg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.jpg","path":"css/images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.jpg","path":"css/images/logo.jpg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/icarus/.git","hash":"0c6275f90869ffa89aeaf88c140d155d48b02079","modified":1526122655095},{"_id":"themes/icarus/.gitignore","hash":"35572c0f161a751b9f30ae3a9935ac045dba5220","modified":1526122655415},{"_id":"themes/icarus/_config.yml","hash":"bdb405cd17ef84e03c5a9c8e804a8066045460f1","modified":1526215498919},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1526122655415},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1526122655415},{"_id":"themes/icarus/_config.yml.example","hash":"b389a45f97c36b24c267b75447ee26dcfc6f2fe3","modified":1526122655415},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1526122655435},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1526119304810},{"_id":"source/images/howmakesearvhmicroservice.jpg","hash":"2586a8f843d753b6d120dfa3a61044db9273b1ca","modified":1526326287000},{"_id":"source/_posts/Как-сделать-поисковой-микросервис.md","hash":"caf825e9aaf4a4f9d61e25f483bc7902379454d1","modified":1526364575809},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1526122655415},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1526122655415},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1526122655415},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1526122655415},{"_id":"themes/icarus/languages/id.yml","hash":"e4961da507f66c8f7c37f85653a9437cb2056bf6","modified":1526122655415},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1526122655415},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1526122655415},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1526122655415},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1526122655415},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1526122655415},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1526122655415},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1526122655415},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1526122655415},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1526122655425},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1526122655415},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1526122655415},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1526122655425},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1526122655435},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1526122655435},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1526122655425},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1526122655425},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1526122655435},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1526122655435},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1526122655415},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1526122655415},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1526122655415},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1526122655425},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1526122655425},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1526122655425},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1526122655425},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1526122655425},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"0bce9ca0767b49d2a9fc026a6004a8526a20624b","modified":1526122655425},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1526122655425},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1526122655425},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"d45f652268671de96c86d8ca50b9deaf011274f0","modified":1526122655425},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1526122655425},{"_id":"themes/icarus/layout/common/head.ejs","hash":"c2d3cca61255ae2206e65213314750a3cbe7209d","modified":1526326755067},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1526122655425},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1526122655425},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1526122655425},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1526122655425},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"341cd68449cd6784da21420a39f1d03575556ba1","modified":1526122655425},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1526122655425},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1526122655425},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1526122655425},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1526122655425},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1526122655425},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1526122655425},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1526122655425},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1526122655425},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1526122655425},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1526122655425},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1526122655425},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1526122655425},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1526122655425},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1526122655425},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1526122655425},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1526122655425},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1526122655435},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1526122655435},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1526122655435},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1526122655435},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1526122655435},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1526122655435},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1526122655435},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1526122655425},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1526122655435},{"_id":"themes/icarus/source/css/style.styl","hash":"712fa4dae6dd6e8fa86ddeaa7b8adb84364d80fd","modified":1526144518176},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1526122655475},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1526122655475},{"_id":"themes/icarus/source/js/main.js","hash":"2c148f06c5799b5d7dd165c5162e780535e07a40","modified":1526122655475},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1526122655425},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1526122655425},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1526122655435},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1526122655445},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1526122655455},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1526122655465},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"7a6f3967317c822d00ede2496fb27ccafcbb0897","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"be59ab5c1763aaea93f3ab1ba3869979e7d271e9","modified":1526144518176},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1526122655465},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1526122655465},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1526122655475},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1526122655475},{"_id":"themes/icarus/source/css/images/avatar.jpg","hash":"2595c2eb0790f61ee7c82eeb0fe27b82ea94b9fd","modified":1526144159000},{"_id":"themes/icarus/source/css/images/logo.jpg","hash":"2595c2eb0790f61ee7c82eeb0fe27b82ea94b9fd","modified":1526144159000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1526122655475},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1526122655495},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1526122655435},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1526122655495},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1526122655515},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1526122655475},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1526122655475},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1526122655495},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1526122655505},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1526122655505},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1526122655515},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1526122655515},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1526122655475},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1526122655475},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1526122655485},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1526122655495},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1526122655495},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1526122655515},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1526122655515},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1526122655515},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1526122655485},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1526122655485},{"_id":"source/categories/index.md","hash":"ccc939483339913dcd92b67738aca50723437612","modified":1526361539783},{"_id":"source/info/index.md","hash":"bf8523bc5ed9f75f3e3a2d6e136657fcab3449c1","modified":1526361823403},{"_id":"source/tags/index.md","hash":"0f45d193dea5f04eb866e7ada5e2b8554977ee74","modified":1526354868565}],"Category":[{"name":"Статьи","_id":"cjh6ocymq0002qjs6ragp45cv"}],"Data":[],"Page":[{"title":"Категории","layout":"Categories","_content":"","source":"categories/index.md","raw":"title: \"Категории\"\nlayout: \"Categories\"\n---\n","date":"2018-05-15T05:18:59.783Z","updated":"2018-05-15T05:18:59.783Z","path":"categories/index.html","comments":1,"_id":"cjh7a2i6o000048s6bzsr7igo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"О 40PK","_content":"\n40PK Channel - это сайт и канал в Телеграм, где для вас находят и публикуют самые интересные материалы и мероприятия из мира программирования.\n\nНаш канал в телеграмме — [@fortypk](https://t.me/fortypk)\nE-mail — fortypk@gmail.com\n","source":"info/index.md","raw":"title: О 40PK\n---\n\n40PK Channel - это сайт и канал в Телеграм, где для вас находят и публикуют самые интересные материалы и мероприятия из мира программирования.\n\nНаш канал в телеграмме — [@fortypk](https://t.me/fortypk)\nE-mail — fortypk@gmail.com\n","date":"2018-05-15T05:23:43.403Z","updated":"2018-05-15T05:23:43.403Z","path":"info/index.html","comments":1,"layout":"page","_id":"cjh7a2i6t000148s6847rwq5p","content":"<p>40PK Channel - это сайт и канал в Телеграм, где для вас находят и публикуют самые интересные материалы и мероприятия из мира программирования.</p>\n<p>Наш канал в телеграмме — <a href=\"https://t.me/fortypk\" target=\"_blank\" rel=\"noopener\">@fortypk</a><br>E-mail — <a href=\"mailto:fortypk@gmail.com\" target=\"_blank\" rel=\"noopener\">fortypk@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>40PK Channel - это сайт и канал в Телеграм, где для вас находят и публикуют самые интересные материалы и мероприятия из мира программирования.</p>\n<p>Наш канал в телеграмме — <a href=\"https://t.me/fortypk\" target=\"_blank\" rel=\"noopener\">@fortypk</a><br>E-mail — <a href=\"mailto:fortypk@gmail.com\" target=\"_blank\" rel=\"noopener\">fortypk@gmail.com</a></p>\n"},{"title":"Теги","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Теги\"\nlayout: \"tags\"\n---\n","date":"2018-05-15T03:27:48.565Z","updated":"2018-05-15T03:27:48.565Z","path":"tags/index.html","comments":1,"_id":"cjh7a2iaq000648s6p6f3drvu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Как сделать поисковой микросервис","date":"2018-05-14T19:50:57.000Z","banner":"/images/howmakesearvhmicroservice.jpg","_content":"\nПоиск является неотъемлемой частью любого приложения и возможность найти что-либо через строку поиска. Есть много способов сделать это, я видел как это сделано на стороне клиента с помощью цикла, или же с полнотекстовой индексацией в Postgres или MySQL. Но наступает ситуация, где нам нужен отдельный поисковой сервис, и для этого часто выбирают Elasticsearch.\n<!-- more -->\nВ этой статье я покажу как сделать простой поисковой микросервис, используя язык программирования Golang. Мы будем искать пользователей по электронной почте, никнейму и настоящему имени. Все исходники вы можете найти на GitHub.\n\n### Архитектура\n\nПрежде чем начать писать код давайте разберемся как это должно работать.\n\nВажно понимать, что Elasticsearch не должен подвергаться прямому воздействию клиента, поэтому создание промежуточного микросервиса имеет важное значение.\n\nВ этом примере для микросервиса потребуется один endpoint для поиска. Также нам надо заполнить кеш Elasticsearch'а, поэтому нам понадобится второй endpoint. В реальном приложении лучше использовать какую-то очередь для набора Producer  и Consumer (подробнее об этом описано здесь), чтобы заполнить систему. Однако мы не будем к этому прибегать в этой статье.\n\nМы будем использовать в качестве двух endpoint'ов следующее:\n\n* `/search`\n* `/populate`\n\nЭти endpoint'ы будут получать параметры.\n\n### Поиск\n\nПоисковой endpoint должен получать два параметра, во-первых, нам нужно указать строку, которую будем искать. Также нам нужна простейшая пагинация, чтобы указать сколько результатов поиска вернуть и сколько нужно результатов проигнорировать в начале поиска.\n\n* q - строка для поискового запроса\n* from - начальный индекс в списке результатов\n* size - колличество результатов для возвращения\n\n### Заполнение\n\nЗаполняющий endpoint получает только один параметр, который используется для определения количества результатов для генерирования. \n\n* number - количество результатов для вставки в Elasticsearch \n\n### Endpoint'ы\n\nТеперь, когда мы знаем структуру нашего микросервиса и какие endpoint'ы и параметры нам нужны, давайте начнем с писать код!\n\nВо-первых, сначала создадим главный файл `main.go` с endpoint'ами и базовым HTTP-сервером.\n\n```golang\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"/populate\", func(w http.ResponseWriter, req *http.Request) {\n        \n    })\n\n    mux.HandleFunc(\"/search\", func(w http.ResponseWriter, req *http.Request) {\n\n    })\n\n    log.Fatal(http.ListenAndServe(\":8000\", mux))\n}\n```\n\nПоскольку это достаточно маленький микросервис, мы создадим endpoint'ы непосредственно в файле `main.go`. Но в продакшн или если у вас больше логики, лучше перенести эти endpoint'ы в отдельный файлы.\n\nТеперь, давайте напишем поисковой endpoint.\n\nНам нужно будет получить `get` параметры, что относительно неуклюже и долго, когда вы используете стандартную библиотеку Golang, поэтому я не буду описывать это в статье, если вам интересно, то метод описан на [GitHub](https://github.com/rymccue/search-microservice-demo/blob/master/main.go#L10).\n\nПосле получения параметров мы проверяем, правильны ли они, если нет, то отправляем ответ, что это недопустимый запрос. После этого мы передаем параметры `term`, `from` и `size` в нашу функцию поиска в Elasticsearch, которую мы создадим в следующем разделе. Функция будет опрашивать Elasticsearch и возвращать результаты, а также ошибку, если таковая случится. Оттуда мы будем формировать json ответ и отправлять его клиенту. Довольно просто.\n\n```golang\nmux.HandleFunc(\"/search\", func(w http.ResponseWriter, req *http.Request) {\n    term, from, size, ok := getQueryParams(req)\n    if !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    res, err := Search(term, from, size)\n    if err != nil {\n        w.WriteHeader(http.StatusInternalServerError)\n        w.Write([]byte(\"Error searching\"))\n        return\n    }\n\n    w.WriteHeader(http.StatusOK)\n    json.NewEncoder(w).Encode(res)\n})\n```\n\nСледующая задача - создать endpoint для заполнения Elasticsearch. Наличие endpoint'а поиска не имеет смысла, если у нас нет данных для поиска!\n\nПервое, что мы делаем, это получить get параметр `number` и переобразовать его в целое число. Если он неправильный, мы возвращаем отрицательный ответ клиенту. Следующий шаг - заполнить Elasticsearch, это делается с помощью вспомогательной функции, которую мы сделаем позже в этой статье. Наконец, мы возвращаем ошибку, если функция заполнения отдает ошибку.\n\n ```golang\nmux.HandleFunc(\"/populate\", func(w http.ResponseWriter, req *http.Request) {\n    numberArr, ok := req.URL.Query()[\"number\"]\n    if !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    numberStr := numberArr[0]\n    number, err := strconv.Atoi(numberStr)\n    if err != nil {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    err = Populate(number)\n    if err != nil || !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(err.Error()))\n        return\n    }\n})\n```\n\nТеперь, когда мы создали endpoint'ы, нам нужно связать все это вместе с функциями Elasticsearch.\n\n### Elasticsearch Helpers\n\nПоследняя часть создания микросервиса это подключение к Elasticsearch. Давайте создадим helper'ы сейчас, мы сделаем это в новом файле `elastic.go`.\n\nДавайте посмотрим, как должен выглядеть файл, сначала нам нужна json-модель для Elasticsearch. Вам нужно создать структуру пользователя `User` со следующими полями:\n\n * `Username` с json-декоратором `username`\n * `Email` с json-декоратором `email`\n * `RealName` с json-декоратором `real_name`\n\nНам также необходимо создать функции `Populate` и `Search`.\n\n```golang\npackage main\n\nimport (\n    \"context\"\n    \"github.com/olivere/elastic\"\n    \"github.com/icrowley/fake\"\n    \"encoding/json\"\n)\n\ntype User struct {\n    Username string `json:\"username\"`\n    Email    string `json:\"email\"`\n    RealName string `json:\"real_name\"`\n}\n\nfunc Populate(number int) error {\n\n}\n\nfunc Search(term string, from, size int) ([]*User, error) {\n\n}\n```\n\nТеперь, когда мы написали макет, следующий шаг - создать методы. Мы используем [github.com/olivere/elastic](https://github.com/olivere/elastic) для работы с Elasticsearch.\n\nТеперь создадим логику для функции поиска. Первый шаг это соединиться к поиску Elastic и мы сделаем это создав новый клиент. Если соединение прошло успешно мы формируем запрос. Мы используем многопоточный запрос, если вам интересны другие параметры вы можете найти их в [документации](https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html) Elasticsearch.\n\nНаконец, мы вызываем метод `Search` и передаём корректные параметры, используем индекс пользователя, и передаём ранее созданный многопоточный запрос и добавляем пагинацию.\n\nВ ответ мы получим много довольно интересной информации, но для нашего микросервиса мы не занимаемся журналированием или аналитикой, поэтому нас интересуют только результаты поиска. Мы проходимся циклом по результатам и используем `json.Unmarshal`, чтобы добавить пользователей в нашу структуру и затем добавляем структуру в массив, чтобы передать клиенту.\n\n```golang\nfunc Search(term string, from, size int) ([]*User, error) {\n    client, err := elastic.NewClient(elastic.SetURL(\"http://elasticsearch:9200\"))\n    if err != err {\n        return nil, err\n    }\n    q := elastic.NewMultiMatchQuery(term, \"username\", \"email\", \"real_name\").Fuzziness(\"AUTO:2,5\")\n    res, err := client.Search().\n        Index(\"users\").\n        Query(q).\n        From(from).\n        Size(size).\n        Do(context.Background())\n    if err != nil {\n        return nil, err\n    }\n    users := make([]*User, 0)\n\n    for _, hit := range res.Hits.Hits {\n        var user User\n        err := json.Unmarshal(*hit.Source, &user)\n        if err != nil {\n            return nil, err\n        }\n        users = append(users, &user)\n    }\n    return users, nil\n}\n```\n\nФункция `Populate` начинается почти также, нам нужно подключится к клиенту. Но мы проверяем, существует ли индекс, и если нет, то создаем его. Затем мы используем [библиотеку](https://github.com/icrowley/fake) для генерации фальшивых пользователей, генерируем и передаем их в функцию, и вставляем в Elasticsearch.\n\n```golang\nfunc Populate(number int) error {\n    client, err := elastic.NewClient(elastic.SetURL(\"http://elasticsearch:9200\"))\n    if err != nil {\n        return err\n    }\n\n    idxExists, err := client.IndexExists(\"users\").Do(context.Background())\n    if err != nil {\n        return err\n    }\n    if !idxExists {\n        client.CreateIndex(\"users\").Do(context.Background())\n    }\n\n    for i := 0; i < number; i++ {\n        user := User{\n            Username: fake.UserName(),\n            Email: fake.EmailAddress(),\n            RealName: fake.FullName(),\n        }\n        _, err = client.Index().\n            Index(\"users\").\n            Type(\"doc\").\n            BodyJson(user).\n            Do(context.Background())\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}\n```\n\n### Настраиваем Docker\n\nДля этой системы я выбираю docker-compose, чтобы связать поисковый микросервис с Elasticsearch. В [документации](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html) Elasticsearch есть отличная статья по этому поводу. Я последовал за этой статьей с несколькими небольшими изменениями. Единственная часть, на которой нам нужно сосредоточиться, - это Dockerfile, а также привязка его к Elasticsearch через docker-compose.\n\n Dockerfile довольно простой, мы загружаем docker образ `Golang 1.10 alpine`, добавляем `dep` для нашего менеджера зависимостей, добавляем путь к коду в `GOPATH`, получаем зависимости с `dep`, компилируем программу и запускаем ее.\n\n```dockerfile\nFROM golang:1.10-alpine\n\nLABEL authors=\"Ryan McCue <ryan@msys.ca>\"\n\nRUN apk add --no-cache ca-certificates openssl git\nRUN wget -O /usr/local/bin/dep https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 && \\\n  chmod +x /usr/local/bin/dep\n\nRUN mkdir /go/src/app\n\nADD . /go/src/app/\n\nWORKDIR /go/src/app\n\nRUN dep ensure\n\nRUN go build -o main .\n\nCMD [\"/go/src/app/main\"]\n```\n\nФайл `docker-compose.yml` стандартный, он основан на [этом](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html) с добавлением службы поиска и добавлением в `esnet`.\n\n```yml\nversion: '2.2'\nservices:\n  search:\n    container_name: search\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n    volumes:\n      - ./search:/www\n    ports:\n      - \"8080:8000\"\n    networks:\n      - esnet\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n    container_name: elasticsearch\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata1:/usr/share/elasticsearch/data\n    networks:\n      - wsdnet\n    healthcheck:\n      test: \"curl -f http://localhost:9200 || exit 1\"\n      interval: 1s\n      retries: 20\n    networks:\n      - esnet\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n    container_name: elasticsearch2\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - \"discovery.zen.ping.unicast.hosts=elasticsearch\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata2:/usr/share/elasticsearch/data\n    networks:\n      - esnet\n\nvolumes:\n  esdata1:\n    driver: local\n  esdata2:\n    driver: local\n\nnetworks:\n  esnet:\n```\n\nЧтобы проверить и убедиться, что файлы работают вместе, как и планировалось, выполните `docker-compose build` для построения поискового микросервиса, а затем запустите `docker-compose up` для запуска кода. Elasticsearch будет собран в `docker-compose up`, поэтому не беспокойтесь, если вы заметите это.\n\n### Запуск!\n\nТеперь, когда микросервис написан и взаимодействует с Elasticsearch, пришло время проверить его. Давайте запустим наши endpoint'ы и посмотрим, что произойдет! Во-первых, мы должны заполнить Elasticsearch результатами, поэтому давайте запустим endpoint `/populate`. Вы можете запустить его с помощью ссылки ниже:\n```\nhttp://localhost:8080/populate?number=100\n```\n\nПосле заполнения следующий шаг - поиск результатов. Поскольку мы используем Faker, имена не известны заранее, поэтому вам, возможно, придется попробовать пару имен, прежде чем вы увидите результаты. Вы можете запустить поисковой endpoint с помощью ссылки ниже:\n```\nhttp://localhost:8080/search?q=ryan&from=0&size=20\n```\n\n### Заключение\n\nЭта статья показывает как можно легко сделать микросервис для таких сервисов, как поиск, и подключить его для работы с Elasticsearch. В реальной системе вы не будете генерировать случайные данные, вы, вероятно, будете использовать webhooks или системы очередей для заполнения поиска.\n\nИсточник: [ryanmccue](https://ryanmccue.ca/how-to-create-a-search-microservice/)\n","source":"_posts/Как-сделать-поисковой-микросервис.md","raw":"---\ntitle: Как сделать поисковой микросервис\ndate: 2018-05-14 22:50:57\ntags:\n  - API\n  - Golang\n  - Микросервис\n  - Elasticsearch\n  - Перевод\ncategories:\n  - Статьи\nbanner: /images/howmakesearvhmicroservice.jpg\n---\n\nПоиск является неотъемлемой частью любого приложения и возможность найти что-либо через строку поиска. Есть много способов сделать это, я видел как это сделано на стороне клиента с помощью цикла, или же с полнотекстовой индексацией в Postgres или MySQL. Но наступает ситуация, где нам нужен отдельный поисковой сервис, и для этого часто выбирают Elasticsearch.\n<!-- more -->\nВ этой статье я покажу как сделать простой поисковой микросервис, используя язык программирования Golang. Мы будем искать пользователей по электронной почте, никнейму и настоящему имени. Все исходники вы можете найти на GitHub.\n\n### Архитектура\n\nПрежде чем начать писать код давайте разберемся как это должно работать.\n\nВажно понимать, что Elasticsearch не должен подвергаться прямому воздействию клиента, поэтому создание промежуточного микросервиса имеет важное значение.\n\nВ этом примере для микросервиса потребуется один endpoint для поиска. Также нам надо заполнить кеш Elasticsearch'а, поэтому нам понадобится второй endpoint. В реальном приложении лучше использовать какую-то очередь для набора Producer  и Consumer (подробнее об этом описано здесь), чтобы заполнить систему. Однако мы не будем к этому прибегать в этой статье.\n\nМы будем использовать в качестве двух endpoint'ов следующее:\n\n* `/search`\n* `/populate`\n\nЭти endpoint'ы будут получать параметры.\n\n### Поиск\n\nПоисковой endpoint должен получать два параметра, во-первых, нам нужно указать строку, которую будем искать. Также нам нужна простейшая пагинация, чтобы указать сколько результатов поиска вернуть и сколько нужно результатов проигнорировать в начале поиска.\n\n* q - строка для поискового запроса\n* from - начальный индекс в списке результатов\n* size - колличество результатов для возвращения\n\n### Заполнение\n\nЗаполняющий endpoint получает только один параметр, который используется для определения количества результатов для генерирования. \n\n* number - количество результатов для вставки в Elasticsearch \n\n### Endpoint'ы\n\nТеперь, когда мы знаем структуру нашего микросервиса и какие endpoint'ы и параметры нам нужны, давайте начнем с писать код!\n\nВо-первых, сначала создадим главный файл `main.go` с endpoint'ами и базовым HTTP-сервером.\n\n```golang\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    mux := http.NewServeMux()\n\n    mux.HandleFunc(\"/populate\", func(w http.ResponseWriter, req *http.Request) {\n        \n    })\n\n    mux.HandleFunc(\"/search\", func(w http.ResponseWriter, req *http.Request) {\n\n    })\n\n    log.Fatal(http.ListenAndServe(\":8000\", mux))\n}\n```\n\nПоскольку это достаточно маленький микросервис, мы создадим endpoint'ы непосредственно в файле `main.go`. Но в продакшн или если у вас больше логики, лучше перенести эти endpoint'ы в отдельный файлы.\n\nТеперь, давайте напишем поисковой endpoint.\n\nНам нужно будет получить `get` параметры, что относительно неуклюже и долго, когда вы используете стандартную библиотеку Golang, поэтому я не буду описывать это в статье, если вам интересно, то метод описан на [GitHub](https://github.com/rymccue/search-microservice-demo/blob/master/main.go#L10).\n\nПосле получения параметров мы проверяем, правильны ли они, если нет, то отправляем ответ, что это недопустимый запрос. После этого мы передаем параметры `term`, `from` и `size` в нашу функцию поиска в Elasticsearch, которую мы создадим в следующем разделе. Функция будет опрашивать Elasticsearch и возвращать результаты, а также ошибку, если таковая случится. Оттуда мы будем формировать json ответ и отправлять его клиенту. Довольно просто.\n\n```golang\nmux.HandleFunc(\"/search\", func(w http.ResponseWriter, req *http.Request) {\n    term, from, size, ok := getQueryParams(req)\n    if !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    res, err := Search(term, from, size)\n    if err != nil {\n        w.WriteHeader(http.StatusInternalServerError)\n        w.Write([]byte(\"Error searching\"))\n        return\n    }\n\n    w.WriteHeader(http.StatusOK)\n    json.NewEncoder(w).Encode(res)\n})\n```\n\nСледующая задача - создать endpoint для заполнения Elasticsearch. Наличие endpoint'а поиска не имеет смысла, если у нас нет данных для поиска!\n\nПервое, что мы делаем, это получить get параметр `number` и переобразовать его в целое число. Если он неправильный, мы возвращаем отрицательный ответ клиенту. Следующий шаг - заполнить Elasticsearch, это делается с помощью вспомогательной функции, которую мы сделаем позже в этой статье. Наконец, мы возвращаем ошибку, если функция заполнения отдает ошибку.\n\n ```golang\nmux.HandleFunc(\"/populate\", func(w http.ResponseWriter, req *http.Request) {\n    numberArr, ok := req.URL.Query()[\"number\"]\n    if !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    numberStr := numberArr[0]\n    number, err := strconv.Atoi(numberStr)\n    if err != nil {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(\"Attach proper parameters\"))\n        return\n    }\n    err = Populate(number)\n    if err != nil || !ok {\n        w.WriteHeader(http.StatusBadRequest)\n        w.Write([]byte(err.Error()))\n        return\n    }\n})\n```\n\nТеперь, когда мы создали endpoint'ы, нам нужно связать все это вместе с функциями Elasticsearch.\n\n### Elasticsearch Helpers\n\nПоследняя часть создания микросервиса это подключение к Elasticsearch. Давайте создадим helper'ы сейчас, мы сделаем это в новом файле `elastic.go`.\n\nДавайте посмотрим, как должен выглядеть файл, сначала нам нужна json-модель для Elasticsearch. Вам нужно создать структуру пользователя `User` со следующими полями:\n\n * `Username` с json-декоратором `username`\n * `Email` с json-декоратором `email`\n * `RealName` с json-декоратором `real_name`\n\nНам также необходимо создать функции `Populate` и `Search`.\n\n```golang\npackage main\n\nimport (\n    \"context\"\n    \"github.com/olivere/elastic\"\n    \"github.com/icrowley/fake\"\n    \"encoding/json\"\n)\n\ntype User struct {\n    Username string `json:\"username\"`\n    Email    string `json:\"email\"`\n    RealName string `json:\"real_name\"`\n}\n\nfunc Populate(number int) error {\n\n}\n\nfunc Search(term string, from, size int) ([]*User, error) {\n\n}\n```\n\nТеперь, когда мы написали макет, следующий шаг - создать методы. Мы используем [github.com/olivere/elastic](https://github.com/olivere/elastic) для работы с Elasticsearch.\n\nТеперь создадим логику для функции поиска. Первый шаг это соединиться к поиску Elastic и мы сделаем это создав новый клиент. Если соединение прошло успешно мы формируем запрос. Мы используем многопоточный запрос, если вам интересны другие параметры вы можете найти их в [документации](https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html) Elasticsearch.\n\nНаконец, мы вызываем метод `Search` и передаём корректные параметры, используем индекс пользователя, и передаём ранее созданный многопоточный запрос и добавляем пагинацию.\n\nВ ответ мы получим много довольно интересной информации, но для нашего микросервиса мы не занимаемся журналированием или аналитикой, поэтому нас интересуют только результаты поиска. Мы проходимся циклом по результатам и используем `json.Unmarshal`, чтобы добавить пользователей в нашу структуру и затем добавляем структуру в массив, чтобы передать клиенту.\n\n```golang\nfunc Search(term string, from, size int) ([]*User, error) {\n    client, err := elastic.NewClient(elastic.SetURL(\"http://elasticsearch:9200\"))\n    if err != err {\n        return nil, err\n    }\n    q := elastic.NewMultiMatchQuery(term, \"username\", \"email\", \"real_name\").Fuzziness(\"AUTO:2,5\")\n    res, err := client.Search().\n        Index(\"users\").\n        Query(q).\n        From(from).\n        Size(size).\n        Do(context.Background())\n    if err != nil {\n        return nil, err\n    }\n    users := make([]*User, 0)\n\n    for _, hit := range res.Hits.Hits {\n        var user User\n        err := json.Unmarshal(*hit.Source, &user)\n        if err != nil {\n            return nil, err\n        }\n        users = append(users, &user)\n    }\n    return users, nil\n}\n```\n\nФункция `Populate` начинается почти также, нам нужно подключится к клиенту. Но мы проверяем, существует ли индекс, и если нет, то создаем его. Затем мы используем [библиотеку](https://github.com/icrowley/fake) для генерации фальшивых пользователей, генерируем и передаем их в функцию, и вставляем в Elasticsearch.\n\n```golang\nfunc Populate(number int) error {\n    client, err := elastic.NewClient(elastic.SetURL(\"http://elasticsearch:9200\"))\n    if err != nil {\n        return err\n    }\n\n    idxExists, err := client.IndexExists(\"users\").Do(context.Background())\n    if err != nil {\n        return err\n    }\n    if !idxExists {\n        client.CreateIndex(\"users\").Do(context.Background())\n    }\n\n    for i := 0; i < number; i++ {\n        user := User{\n            Username: fake.UserName(),\n            Email: fake.EmailAddress(),\n            RealName: fake.FullName(),\n        }\n        _, err = client.Index().\n            Index(\"users\").\n            Type(\"doc\").\n            BodyJson(user).\n            Do(context.Background())\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}\n```\n\n### Настраиваем Docker\n\nДля этой системы я выбираю docker-compose, чтобы связать поисковый микросервис с Elasticsearch. В [документации](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html) Elasticsearch есть отличная статья по этому поводу. Я последовал за этой статьей с несколькими небольшими изменениями. Единственная часть, на которой нам нужно сосредоточиться, - это Dockerfile, а также привязка его к Elasticsearch через docker-compose.\n\n Dockerfile довольно простой, мы загружаем docker образ `Golang 1.10 alpine`, добавляем `dep` для нашего менеджера зависимостей, добавляем путь к коду в `GOPATH`, получаем зависимости с `dep`, компилируем программу и запускаем ее.\n\n```dockerfile\nFROM golang:1.10-alpine\n\nLABEL authors=\"Ryan McCue <ryan@msys.ca>\"\n\nRUN apk add --no-cache ca-certificates openssl git\nRUN wget -O /usr/local/bin/dep https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 && \\\n  chmod +x /usr/local/bin/dep\n\nRUN mkdir /go/src/app\n\nADD . /go/src/app/\n\nWORKDIR /go/src/app\n\nRUN dep ensure\n\nRUN go build -o main .\n\nCMD [\"/go/src/app/main\"]\n```\n\nФайл `docker-compose.yml` стандартный, он основан на [этом](https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html) с добавлением службы поиска и добавлением в `esnet`.\n\n```yml\nversion: '2.2'\nservices:\n  search:\n    container_name: search\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n    volumes:\n      - ./search:/www\n    ports:\n      - \"8080:8000\"\n    networks:\n      - esnet\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n    container_name: elasticsearch\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata1:/usr/share/elasticsearch/data\n    networks:\n      - wsdnet\n    healthcheck:\n      test: \"curl -f http://localhost:9200 || exit 1\"\n      interval: 1s\n      retries: 20\n    networks:\n      - esnet\n  elasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n    container_name: elasticsearch2\n    environment:\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - \"discovery.zen.ping.unicast.hosts=elasticsearch\"\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata2:/usr/share/elasticsearch/data\n    networks:\n      - esnet\n\nvolumes:\n  esdata1:\n    driver: local\n  esdata2:\n    driver: local\n\nnetworks:\n  esnet:\n```\n\nЧтобы проверить и убедиться, что файлы работают вместе, как и планировалось, выполните `docker-compose build` для построения поискового микросервиса, а затем запустите `docker-compose up` для запуска кода. Elasticsearch будет собран в `docker-compose up`, поэтому не беспокойтесь, если вы заметите это.\n\n### Запуск!\n\nТеперь, когда микросервис написан и взаимодействует с Elasticsearch, пришло время проверить его. Давайте запустим наши endpoint'ы и посмотрим, что произойдет! Во-первых, мы должны заполнить Elasticsearch результатами, поэтому давайте запустим endpoint `/populate`. Вы можете запустить его с помощью ссылки ниже:\n```\nhttp://localhost:8080/populate?number=100\n```\n\nПосле заполнения следующий шаг - поиск результатов. Поскольку мы используем Faker, имена не известны заранее, поэтому вам, возможно, придется попробовать пару имен, прежде чем вы увидите результаты. Вы можете запустить поисковой endpoint с помощью ссылки ниже:\n```\nhttp://localhost:8080/search?q=ryan&from=0&size=20\n```\n\n### Заключение\n\nЭта статья показывает как можно легко сделать микросервис для таких сервисов, как поиск, и подключить его для работы с Elasticsearch. В реальной системе вы не будете генерировать случайные данные, вы, вероятно, будете использовать webhooks или системы очередей для заполнения поиска.\n\nИсточник: [ryanmccue](https://ryanmccue.ca/how-to-create-a-search-microservice/)\n","slug":"Как-сделать-поисковой-микросервис","published":1,"updated":"2018-05-15T06:19:07.679Z","_id":"cjh6ocyln0000qjs6qog1fn7a","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Поиск является неотъемлемой частью любого приложения и возможность найти что-либо через строку поиска. Есть много способов сделать это, я видел как это сделано на стороне клиента с помощью цикла, или же с полнотекстовой индексацией в Postgres или MySQL. Но наступает ситуация, где нам нужен отдельный поисковой сервис, и для этого часто выбирают Elasticsearch.<br><a id=\"more\"></a><br>В этой статье я покажу как сделать простой поисковой микросервис, используя язык программирования Golang. Мы будем искать пользователей по электронной почте, никнейму и настоящему имени. Все исходники вы можете найти на GitHub.</p>\n<h3 id=\"Архитектура\"><a href=\"#Архитектура\" class=\"headerlink\" title=\"Архитектура\"></a>Архитектура</h3><p>Прежде чем начать писать код давайте разберемся как это должно работать.</p>\n<p>Важно понимать, что Elasticsearch не должен подвергаться прямому воздействию клиента, поэтому создание промежуточного микросервиса имеет важное значение.</p>\n<p>В этом примере для микросервиса потребуется один endpoint для поиска. Также нам надо заполнить кеш Elasticsearch’а, поэтому нам понадобится второй endpoint. В реальном приложении лучше использовать какую-то очередь для набора Producer  и Consumer (подробнее об этом описано здесь), чтобы заполнить систему. Однако мы не будем к этому прибегать в этой статье.</p>\n<p>Мы будем использовать в качестве двух endpoint’ов следующее:</p>\n<ul>\n<li><code>/search</code></li>\n<li><code>/populate</code></li>\n</ul>\n<p>Эти endpoint’ы будут получать параметры.</p>\n<h3 id=\"Поиск\"><a href=\"#Поиск\" class=\"headerlink\" title=\"Поиск\"></a>Поиск</h3><p>Поисковой endpoint должен получать два параметра, во-первых, нам нужно указать строку, которую будем искать. Также нам нужна простейшая пагинация, чтобы указать сколько результатов поиска вернуть и сколько нужно результатов проигнорировать в начале поиска.</p>\n<ul>\n<li>q - строка для поискового запроса</li>\n<li>from - начальный индекс в списке результатов</li>\n<li>size - колличество результатов для возвращения</li>\n</ul>\n<h3 id=\"Заполнение\"><a href=\"#Заполнение\" class=\"headerlink\" title=\"Заполнение\"></a>Заполнение</h3><p>Заполняющий endpoint получает только один параметр, который используется для определения количества результатов для генерирования. </p>\n<ul>\n<li>number - количество результатов для вставки в Elasticsearch </li>\n</ul>\n<h3 id=\"Endpoint’ы\"><a href=\"#Endpoint’ы\" class=\"headerlink\" title=\"Endpoint’ы\"></a>Endpoint’ы</h3><p>Теперь, когда мы знаем структуру нашего микросервиса и какие endpoint’ы и параметры нам нужны, давайте начнем с писать код!</p>\n<p>Во-первых, сначала создадим главный файл <code>main.go</code> с endpoint’ами и базовым HTTP-сервером.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\"></span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/populate\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/search\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8000\"</span>, mux))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Поскольку это достаточно маленький микросервис, мы создадим endpoint’ы непосредственно в файле <code>main.go</code>. Но в продакшн или если у вас больше логики, лучше перенести эти endpoint’ы в отдельный файлы.</p>\n<p>Теперь, давайте напишем поисковой endpoint.</p>\n<p>Нам нужно будет получить <code>get</code> параметры, что относительно неуклюже и долго, когда вы используете стандартную библиотеку Golang, поэтому я не буду описывать это в статье, если вам интересно, то метод описан на <a href=\"https://github.com/rymccue/search-microservice-demo/blob/master/main.go#L10\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>После получения параметров мы проверяем, правильны ли они, если нет, то отправляем ответ, что это недопустимый запрос. После этого мы передаем параметры <code>term</code>, <code>from</code> и <code>size</code> в нашу функцию поиска в Elasticsearch, которую мы создадим в следующем разделе. Функция будет опрашивать Elasticsearch и возвращать результаты, а также ошибку, если таковая случится. Оттуда мы будем формировать json ответ и отправлять его клиенту. Довольно просто.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mux.HandleFunc(<span class=\"string\">\"/search\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    term, from, size, ok := getQueryParams(req)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res, err := Search(term, from, size)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Error searching\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    w.WriteHeader(http.StatusOK)</span><br><span class=\"line\">    json.NewEncoder(w).Encode(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Следующая задача - создать endpoint для заполнения Elasticsearch. Наличие endpoint’а поиска не имеет смысла, если у нас нет данных для поиска!</p>\n<p>Первое, что мы делаем, это получить get параметр <code>number</code> и переобразовать его в целое число. Если он неправильный, мы возвращаем отрицательный ответ клиенту. Следующий шаг - заполнить Elasticsearch, это делается с помощью вспомогательной функции, которую мы сделаем позже в этой статье. Наконец, мы возвращаем ошибку, если функция заполнения отдает ошибку.</p>\n <figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mux.HandleFunc(<span class=\"string\">\"/populate\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    numberArr, ok := req.URL.Query()[<span class=\"string\">\"number\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberStr := numberArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    number, err := strconv.Atoi(numberStr)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    err = Populate(number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> || !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(err.Error()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Теперь, когда мы создали endpoint’ы, нам нужно связать все это вместе с функциями Elasticsearch.</p>\n<h3 id=\"Elasticsearch-Helpers\"><a href=\"#Elasticsearch-Helpers\" class=\"headerlink\" title=\"Elasticsearch Helpers\"></a>Elasticsearch Helpers</h3><p>Последняя часть создания микросервиса это подключение к Elasticsearch. Давайте создадим helper’ы сейчас, мы сделаем это в новом файле <code>elastic.go</code>.</p>\n<p>Давайте посмотрим, как должен выглядеть файл, сначала нам нужна json-модель для Elasticsearch. Вам нужно создать структуру пользователя <code>User</code> со следующими полями:</p>\n<ul>\n<li><code>Username</code> с json-декоратором <code>username</code></li>\n<li><code>Email</code> с json-декоратором <code>email</code></li>\n<li><code>RealName</code> с json-декоратором <code>real_name</code></li>\n</ul>\n<p>Нам также необходимо создать функции <code>Populate</code> и <code>Search</code>.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/olivere/elastic\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/icrowley/fake\"</span></span><br><span class=\"line\">    <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Username <span class=\"keyword\">string</span> <span class=\"string\">`json:\"username\"`</span></span><br><span class=\"line\">    Email    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"email\"`</span></span><br><span class=\"line\">    RealName <span class=\"keyword\">string</span> <span class=\"string\">`json:\"real_name\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Populate</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Search</span><span class=\"params\">(term <span class=\"keyword\">string</span>, from, size <span class=\"keyword\">int</span>)</span> <span class=\"params\">([]*User, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Теперь, когда мы написали макет, следующий шаг - создать методы. Мы используем <a href=\"https://github.com/olivere/elastic\" target=\"_blank\" rel=\"noopener\">github.com/olivere/elastic</a> для работы с Elasticsearch.</p>\n<p>Теперь создадим логику для функции поиска. Первый шаг это соединиться к поиску Elastic и мы сделаем это создав новый клиент. Если соединение прошло успешно мы формируем запрос. Мы используем многопоточный запрос, если вам интересны другие параметры вы можете найти их в <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html\" target=\"_blank\" rel=\"noopener\">документации</a> Elasticsearch.</p>\n<p>Наконец, мы вызываем метод <code>Search</code> и передаём корректные параметры, используем индекс пользователя, и передаём ранее созданный многопоточный запрос и добавляем пагинацию.</p>\n<p>В ответ мы получим много довольно интересной информации, но для нашего микросервиса мы не занимаемся журналированием или аналитикой, поэтому нас интересуют только результаты поиска. Мы проходимся циклом по результатам и используем <code>json.Unmarshal</code>, чтобы добавить пользователей в нашу структуру и затем добавляем структуру в массив, чтобы передать клиенту.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Search</span><span class=\"params\">(term <span class=\"keyword\">string</span>, from, size <span class=\"keyword\">int</span>)</span> <span class=\"params\">([]*User, error)</span></span> &#123;</span><br><span class=\"line\">    client, err := elastic.NewClient(elastic.SetURL(<span class=\"string\">\"http://elasticsearch:9200\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != err &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q := elastic.NewMultiMatchQuery(term, <span class=\"string\">\"username\"</span>, <span class=\"string\">\"email\"</span>, <span class=\"string\">\"real_name\"</span>).Fuzziness(<span class=\"string\">\"AUTO:2,5\"</span>)</span><br><span class=\"line\">    res, err := client.Search().</span><br><span class=\"line\">        Index(<span class=\"string\">\"users\"</span>).</span><br><span class=\"line\">        Query(q).</span><br><span class=\"line\">        From(from).</span><br><span class=\"line\">        Size(size).</span><br><span class=\"line\">        Do(context.Background())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    users := <span class=\"built_in\">make</span>([]*User, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, hit := <span class=\"keyword\">range</span> res.Hits.Hits &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> user User</span><br><span class=\"line\">        err := json.Unmarshal(*hit.Source, &amp;user)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        users = <span class=\"built_in\">append</span>(users, &amp;user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> users, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Функция <code>Populate</code> начинается почти также, нам нужно подключится к клиенту. Но мы проверяем, существует ли индекс, и если нет, то создаем его. Затем мы используем <a href=\"https://github.com/icrowley/fake\" target=\"_blank\" rel=\"noopener\">библиотеку</a> для генерации фальшивых пользователей, генерируем и передаем их в функцию, и вставляем в Elasticsearch.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Populate</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    client, err := elastic.NewClient(elastic.SetURL(<span class=\"string\">\"http://elasticsearch:9200\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    idxExists, err := client.IndexExists(<span class=\"string\">\"users\"</span>).Do(context.Background())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !idxExists &#123;</span><br><span class=\"line\">        client.CreateIndex(<span class=\"string\">\"users\"</span>).Do(context.Background())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; number; i++ &#123;</span><br><span class=\"line\">        user := User&#123;</span><br><span class=\"line\">            Username: fake.UserName(),</span><br><span class=\"line\">            Email: fake.EmailAddress(),</span><br><span class=\"line\">            RealName: fake.FullName(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _, err = client.Index().</span><br><span class=\"line\">            Index(<span class=\"string\">\"users\"</span>).</span><br><span class=\"line\">            Type(<span class=\"string\">\"doc\"</span>).</span><br><span class=\"line\">            BodyJson(user).</span><br><span class=\"line\">            Do(context.Background())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Настраиваем-Docker\"><a href=\"#Настраиваем-Docker\" class=\"headerlink\" title=\"Настраиваем Docker\"></a>Настраиваем Docker</h3><p>Для этой системы я выбираю docker-compose, чтобы связать поисковый микросервис с Elasticsearch. В <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">документации</a> Elasticsearch есть отличная статья по этому поводу. Я последовал за этой статьей с несколькими небольшими изменениями. Единственная часть, на которой нам нужно сосредоточиться, - это Dockerfile, а также привязка его к Elasticsearch через docker-compose.</p>\n<p> Dockerfile довольно простой, мы загружаем docker образ <code>Golang 1.10 alpine</code>, добавляем <code>dep</code> для нашего менеджера зависимостей, добавляем путь к коду в <code>GOPATH</code>, получаем зависимости с <code>dep</code>, компилируем программу и запускаем ее.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.10</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> authors=\"Ryan McCue &lt;ryan@msys.ca&gt;\"</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add --no-cache ca-certificates openssl git</span><br><span class=\"line\">RUN wget -O /usr/local/bin/dep https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 &amp;&amp; \\</span><br><span class=\"line\">  chmod +x /usr/local/bin/dep</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">ADD . /go/src/app/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">RUN dep ensure</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -o main .</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [\"/go/src/app/main\"]</span><br></pre></td></tr></table></figure>\n<p>Файл <code>docker-compose.yml</code> стандартный, он основан на <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">этом</a> с добавлением службы поиска и добавлением в <code>esnet</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2.2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  search:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">search</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span></span><br><span class=\"line\"><span class=\"attr\">      context:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">      dockerfile:</span> <span class=\"string\">./Dockerfile</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./search:/www</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8000\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"><span class=\"attr\">  elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:6.2.4</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata1:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">wsdnet</span></span><br><span class=\"line\"><span class=\"attr\">    healthcheck:</span></span><br><span class=\"line\"><span class=\"attr\">      test:</span> <span class=\"string\">\"curl -f http://localhost:9200 || exit 1\"</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">1</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">      retries:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"><span class=\"attr\">  elasticsearch2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:6.2.4</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">elasticsearch2</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"discovery.zen.ping.unicast.hosts=elasticsearch\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata2:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">  esdata1:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  esdata2:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  esnet:</span></span><br></pre></td></tr></table></figure>\n<p>Чтобы проверить и убедиться, что файлы работают вместе, как и планировалось, выполните <code>docker-compose build</code> для построения поискового микросервиса, а затем запустите <code>docker-compose up</code> для запуска кода. Elasticsearch будет собран в <code>docker-compose up</code>, поэтому не беспокойтесь, если вы заметите это.</p>\n<h3 id=\"Запуск\"><a href=\"#Запуск\" class=\"headerlink\" title=\"Запуск!\"></a>Запуск!</h3><p>Теперь, когда микросервис написан и взаимодействует с Elasticsearch, пришло время проверить его. Давайте запустим наши endpoint’ы и посмотрим, что произойдет! Во-первых, мы должны заполнить Elasticsearch результатами, поэтому давайте запустим endpoint <code>/populate</code>. Вы можете запустить его с помощью ссылки ниже:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/populate?number=100</span><br></pre></td></tr></table></figure></p>\n<p>После заполнения следующий шаг - поиск результатов. Поскольку мы используем Faker, имена не известны заранее, поэтому вам, возможно, придется попробовать пару имен, прежде чем вы увидите результаты. Вы можете запустить поисковой endpoint с помощью ссылки ниже:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/search?q=ryan&amp;from=0&amp;size=20</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Заключение\"><a href=\"#Заключение\" class=\"headerlink\" title=\"Заключение\"></a>Заключение</h3><p>Эта статья показывает как можно легко сделать микросервис для таких сервисов, как поиск, и подключить его для работы с Elasticsearch. В реальной системе вы не будете генерировать случайные данные, вы, вероятно, будете использовать webhooks или системы очередей для заполнения поиска.</p>\n<p>Источник: <a href=\"https://ryanmccue.ca/how-to-create-a-search-microservice/\" target=\"_blank\" rel=\"noopener\">ryanmccue</a></p>\n","site":{"data":{}},"excerpt":"<p>Поиск является неотъемлемой частью любого приложения и возможность найти что-либо через строку поиска. Есть много способов сделать это, я видел как это сделано на стороне клиента с помощью цикла, или же с полнотекстовой индексацией в Postgres или MySQL. Но наступает ситуация, где нам нужен отдельный поисковой сервис, и для этого часто выбирают Elasticsearch.<br>","more":"<br>В этой статье я покажу как сделать простой поисковой микросервис, используя язык программирования Golang. Мы будем искать пользователей по электронной почте, никнейму и настоящему имени. Все исходники вы можете найти на GitHub.</p>\n<h3 id=\"Архитектура\"><a href=\"#Архитектура\" class=\"headerlink\" title=\"Архитектура\"></a>Архитектура</h3><p>Прежде чем начать писать код давайте разберемся как это должно работать.</p>\n<p>Важно понимать, что Elasticsearch не должен подвергаться прямому воздействию клиента, поэтому создание промежуточного микросервиса имеет важное значение.</p>\n<p>В этом примере для микросервиса потребуется один endpoint для поиска. Также нам надо заполнить кеш Elasticsearch’а, поэтому нам понадобится второй endpoint. В реальном приложении лучше использовать какую-то очередь для набора Producer  и Consumer (подробнее об этом описано здесь), чтобы заполнить систему. Однако мы не будем к этому прибегать в этой статье.</p>\n<p>Мы будем использовать в качестве двух endpoint’ов следующее:</p>\n<ul>\n<li><code>/search</code></li>\n<li><code>/populate</code></li>\n</ul>\n<p>Эти endpoint’ы будут получать параметры.</p>\n<h3 id=\"Поиск\"><a href=\"#Поиск\" class=\"headerlink\" title=\"Поиск\"></a>Поиск</h3><p>Поисковой endpoint должен получать два параметра, во-первых, нам нужно указать строку, которую будем искать. Также нам нужна простейшая пагинация, чтобы указать сколько результатов поиска вернуть и сколько нужно результатов проигнорировать в начале поиска.</p>\n<ul>\n<li>q - строка для поискового запроса</li>\n<li>from - начальный индекс в списке результатов</li>\n<li>size - колличество результатов для возвращения</li>\n</ul>\n<h3 id=\"Заполнение\"><a href=\"#Заполнение\" class=\"headerlink\" title=\"Заполнение\"></a>Заполнение</h3><p>Заполняющий endpoint получает только один параметр, который используется для определения количества результатов для генерирования. </p>\n<ul>\n<li>number - количество результатов для вставки в Elasticsearch </li>\n</ul>\n<h3 id=\"Endpoint’ы\"><a href=\"#Endpoint’ы\" class=\"headerlink\" title=\"Endpoint’ы\"></a>Endpoint’ы</h3><p>Теперь, когда мы знаем структуру нашего микросервиса и какие endpoint’ы и параметры нам нужны, давайте начнем с писать код!</p>\n<p>Во-первых, сначала создадим главный файл <code>main.go</code> с endpoint’ами и базовым HTTP-сервером.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"log\"</span></span><br><span class=\"line\">    <span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    mux := http.NewServeMux()</span><br><span class=\"line\"></span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/populate\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    mux.HandleFunc(<span class=\"string\">\"/search\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    log.Fatal(http.ListenAndServe(<span class=\"string\">\":8000\"</span>, mux))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Поскольку это достаточно маленький микросервис, мы создадим endpoint’ы непосредственно в файле <code>main.go</code>. Но в продакшн или если у вас больше логики, лучше перенести эти endpoint’ы в отдельный файлы.</p>\n<p>Теперь, давайте напишем поисковой endpoint.</p>\n<p>Нам нужно будет получить <code>get</code> параметры, что относительно неуклюже и долго, когда вы используете стандартную библиотеку Golang, поэтому я не буду описывать это в статье, если вам интересно, то метод описан на <a href=\"https://github.com/rymccue/search-microservice-demo/blob/master/main.go#L10\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<p>После получения параметров мы проверяем, правильны ли они, если нет, то отправляем ответ, что это недопустимый запрос. После этого мы передаем параметры <code>term</code>, <code>from</code> и <code>size</code> в нашу функцию поиска в Elasticsearch, которую мы создадим в следующем разделе. Функция будет опрашивать Elasticsearch и возвращать результаты, а также ошибку, если таковая случится. Оттуда мы будем формировать json ответ и отправлять его клиенту. Довольно просто.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mux.HandleFunc(<span class=\"string\">\"/search\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    term, from, size, ok := getQueryParams(req)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res, err := Search(term, from, size)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusInternalServerError)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Error searching\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    w.WriteHeader(http.StatusOK)</span><br><span class=\"line\">    json.NewEncoder(w).Encode(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Следующая задача - создать endpoint для заполнения Elasticsearch. Наличие endpoint’а поиска не имеет смысла, если у нас нет данных для поиска!</p>\n<p>Первое, что мы делаем, это получить get параметр <code>number</code> и переобразовать его в целое число. Если он неправильный, мы возвращаем отрицательный ответ клиенту. Следующий шаг - заполнить Elasticsearch, это делается с помощью вспомогательной функции, которую мы сделаем позже в этой статье. Наконец, мы возвращаем ошибку, если функция заполнения отдает ошибку.</p>\n <figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mux.HandleFunc(<span class=\"string\">\"/populate\"</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class=\"line\">    numberArr, ok := req.URL.Query()[<span class=\"string\">\"number\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    numberStr := numberArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">    number, err := strconv.Atoi(numberStr)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Attach proper parameters\"</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    err = Populate(number)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> || !ok &#123;</span><br><span class=\"line\">        w.WriteHeader(http.StatusBadRequest)</span><br><span class=\"line\">        w.Write([]<span class=\"keyword\">byte</span>(err.Error()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Теперь, когда мы создали endpoint’ы, нам нужно связать все это вместе с функциями Elasticsearch.</p>\n<h3 id=\"Elasticsearch-Helpers\"><a href=\"#Elasticsearch-Helpers\" class=\"headerlink\" title=\"Elasticsearch Helpers\"></a>Elasticsearch Helpers</h3><p>Последняя часть создания микросервиса это подключение к Elasticsearch. Давайте создадим helper’ы сейчас, мы сделаем это в новом файле <code>elastic.go</code>.</p>\n<p>Давайте посмотрим, как должен выглядеть файл, сначала нам нужна json-модель для Elasticsearch. Вам нужно создать структуру пользователя <code>User</code> со следующими полями:</p>\n<ul>\n<li><code>Username</code> с json-декоратором <code>username</code></li>\n<li><code>Email</code> с json-декоратором <code>email</code></li>\n<li><code>RealName</code> с json-декоратором <code>real_name</code></li>\n</ul>\n<p>Нам также необходимо создать функции <code>Populate</code> и <code>Search</code>.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">\"context\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/olivere/elastic\"</span></span><br><span class=\"line\">    <span class=\"string\">\"github.com/icrowley/fake\"</span></span><br><span class=\"line\">    <span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Username <span class=\"keyword\">string</span> <span class=\"string\">`json:\"username\"`</span></span><br><span class=\"line\">    Email    <span class=\"keyword\">string</span> <span class=\"string\">`json:\"email\"`</span></span><br><span class=\"line\">    RealName <span class=\"keyword\">string</span> <span class=\"string\">`json:\"real_name\"`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Populate</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Search</span><span class=\"params\">(term <span class=\"keyword\">string</span>, from, size <span class=\"keyword\">int</span>)</span> <span class=\"params\">([]*User, error)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Теперь, когда мы написали макет, следующий шаг - создать методы. Мы используем <a href=\"https://github.com/olivere/elastic\" target=\"_blank\" rel=\"noopener\">github.com/olivere/elastic</a> для работы с Elasticsearch.</p>\n<p>Теперь создадим логику для функции поиска. Первый шаг это соединиться к поиску Elastic и мы сделаем это создав новый клиент. Если соединение прошло успешно мы формируем запрос. Мы используем многопоточный запрос, если вам интересны другие параметры вы можете найти их в <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/full-text-queries.html\" target=\"_blank\" rel=\"noopener\">документации</a> Elasticsearch.</p>\n<p>Наконец, мы вызываем метод <code>Search</code> и передаём корректные параметры, используем индекс пользователя, и передаём ранее созданный многопоточный запрос и добавляем пагинацию.</p>\n<p>В ответ мы получим много довольно интересной информации, но для нашего микросервиса мы не занимаемся журналированием или аналитикой, поэтому нас интересуют только результаты поиска. Мы проходимся циклом по результатам и используем <code>json.Unmarshal</code>, чтобы добавить пользователей в нашу структуру и затем добавляем структуру в массив, чтобы передать клиенту.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Search</span><span class=\"params\">(term <span class=\"keyword\">string</span>, from, size <span class=\"keyword\">int</span>)</span> <span class=\"params\">([]*User, error)</span></span> &#123;</span><br><span class=\"line\">    client, err := elastic.NewClient(elastic.SetURL(<span class=\"string\">\"http://elasticsearch:9200\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != err &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q := elastic.NewMultiMatchQuery(term, <span class=\"string\">\"username\"</span>, <span class=\"string\">\"email\"</span>, <span class=\"string\">\"real_name\"</span>).Fuzziness(<span class=\"string\">\"AUTO:2,5\"</span>)</span><br><span class=\"line\">    res, err := client.Search().</span><br><span class=\"line\">        Index(<span class=\"string\">\"users\"</span>).</span><br><span class=\"line\">        Query(q).</span><br><span class=\"line\">        From(from).</span><br><span class=\"line\">        Size(size).</span><br><span class=\"line\">        Do(context.Background())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    users := <span class=\"built_in\">make</span>([]*User, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, hit := <span class=\"keyword\">range</span> res.Hits.Hits &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> user User</span><br><span class=\"line\">        err := json.Unmarshal(*hit.Source, &amp;user)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        users = <span class=\"built_in\">append</span>(users, &amp;user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> users, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Функция <code>Populate</code> начинается почти также, нам нужно подключится к клиенту. Но мы проверяем, существует ли индекс, и если нет, то создаем его. Затем мы используем <a href=\"https://github.com/icrowley/fake\" target=\"_blank\" rel=\"noopener\">библиотеку</a> для генерации фальшивых пользователей, генерируем и передаем их в функцию, и вставляем в Elasticsearch.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Populate</span><span class=\"params\">(number <span class=\"keyword\">int</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    client, err := elastic.NewClient(elastic.SetURL(<span class=\"string\">\"http://elasticsearch:9200\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    idxExists, err := client.IndexExists(<span class=\"string\">\"users\"</span>).Do(context.Background())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !idxExists &#123;</span><br><span class=\"line\">        client.CreateIndex(<span class=\"string\">\"users\"</span>).Do(context.Background())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; number; i++ &#123;</span><br><span class=\"line\">        user := User&#123;</span><br><span class=\"line\">            Username: fake.UserName(),</span><br><span class=\"line\">            Email: fake.EmailAddress(),</span><br><span class=\"line\">            RealName: fake.FullName(),</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        _, err = client.Index().</span><br><span class=\"line\">            Index(<span class=\"string\">\"users\"</span>).</span><br><span class=\"line\">            Type(<span class=\"string\">\"doc\"</span>).</span><br><span class=\"line\">            BodyJson(user).</span><br><span class=\"line\">            Do(context.Background())</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Настраиваем-Docker\"><a href=\"#Настраиваем-Docker\" class=\"headerlink\" title=\"Настраиваем Docker\"></a>Настраиваем Docker</h3><p>Для этой системы я выбираю docker-compose, чтобы связать поисковый микросервис с Elasticsearch. В <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">документации</a> Elasticsearch есть отличная статья по этому поводу. Я последовал за этой статьей с несколькими небольшими изменениями. Единственная часть, на которой нам нужно сосредоточиться, - это Dockerfile, а также привязка его к Elasticsearch через docker-compose.</p>\n<p> Dockerfile довольно простой, мы загружаем docker образ <code>Golang 1.10 alpine</code>, добавляем <code>dep</code> для нашего менеджера зависимостей, добавляем путь к коду в <code>GOPATH</code>, получаем зависимости с <code>dep</code>, компилируем программу и запускаем ее.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> golang:<span class=\"number\">1.10</span>-alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span> authors=\"Ryan McCue &lt;ryan@msys.ca&gt;\"</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apk add --no-cache ca-certificates openssl git</span><br><span class=\"line\">RUN wget -O /usr/local/bin/dep https://github.com/golang/dep/releases/download/v0.4.1/dep-linux-amd64 &amp;&amp; \\</span><br><span class=\"line\">  chmod +x /usr/local/bin/dep</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">ADD . /go/src/app/</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR /go/src/app</span><br><span class=\"line\"></span><br><span class=\"line\">RUN dep ensure</span><br><span class=\"line\"></span><br><span class=\"line\">RUN go build -o main .</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [\"/go/src/app/main\"]</span><br></pre></td></tr></table></figure>\n<p>Файл <code>docker-compose.yml</code> стандартный, он основан на <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\" target=\"_blank\" rel=\"noopener\">этом</a> с добавлением службы поиска и добавлением в <code>esnet</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2.2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  search:</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">search</span></span><br><span class=\"line\"><span class=\"attr\">    build:</span></span><br><span class=\"line\"><span class=\"attr\">      context:</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"attr\">      dockerfile:</span> <span class=\"string\">./Dockerfile</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">./search:/www</span></span><br><span class=\"line\"><span class=\"attr\">    ports:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"8080:8000\"</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"><span class=\"attr\">  elasticsearch:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:6.2.4</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata1:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">wsdnet</span></span><br><span class=\"line\"><span class=\"attr\">    healthcheck:</span></span><br><span class=\"line\"><span class=\"attr\">      test:</span> <span class=\"string\">\"curl -f http://localhost:9200 || exit 1\"</span></span><br><span class=\"line\"><span class=\"attr\">      interval:</span> <span class=\"number\">1</span><span class=\"string\">s</span></span><br><span class=\"line\"><span class=\"attr\">      retries:</span> <span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"><span class=\"attr\">  elasticsearch2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:6.2.4</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">elasticsearch2</span></span><br><span class=\"line\"><span class=\"attr\">    environment:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">cluster.name=docker-cluster</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"ES_JAVA_OPTS=-Xms512m -Xmx512m\"</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">\"discovery.zen.ping.unicast.hosts=elasticsearch\"</span></span><br><span class=\"line\"><span class=\"attr\">    ulimits:</span></span><br><span class=\"line\"><span class=\"attr\">      memlock:</span></span><br><span class=\"line\"><span class=\"attr\">        soft:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">        hard:</span> <span class=\"bullet\">-1</span></span><br><span class=\"line\"><span class=\"attr\">    volumes:</span></span><br><span class=\"line\"><span class=\"attr\">      - esdata2:</span><span class=\"string\">/usr/share/elasticsearch/data</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">esnet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\"><span class=\"attr\">  esdata1:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"><span class=\"attr\">  esdata2:</span></span><br><span class=\"line\"><span class=\"attr\">    driver:</span> <span class=\"string\">local</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  esnet:</span></span><br></pre></td></tr></table></figure>\n<p>Чтобы проверить и убедиться, что файлы работают вместе, как и планировалось, выполните <code>docker-compose build</code> для построения поискового микросервиса, а затем запустите <code>docker-compose up</code> для запуска кода. Elasticsearch будет собран в <code>docker-compose up</code>, поэтому не беспокойтесь, если вы заметите это.</p>\n<h3 id=\"Запуск\"><a href=\"#Запуск\" class=\"headerlink\" title=\"Запуск!\"></a>Запуск!</h3><p>Теперь, когда микросервис написан и взаимодействует с Elasticsearch, пришло время проверить его. Давайте запустим наши endpoint’ы и посмотрим, что произойдет! Во-первых, мы должны заполнить Elasticsearch результатами, поэтому давайте запустим endpoint <code>/populate</code>. Вы можете запустить его с помощью ссылки ниже:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/populate?number=100</span><br></pre></td></tr></table></figure></p>\n<p>После заполнения следующий шаг - поиск результатов. Поскольку мы используем Faker, имена не известны заранее, поэтому вам, возможно, придется попробовать пару имен, прежде чем вы увидите результаты. Вы можете запустить поисковой endpoint с помощью ссылки ниже:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/search?q=ryan&amp;from=0&amp;size=20</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Заключение\"><a href=\"#Заключение\" class=\"headerlink\" title=\"Заключение\"></a>Заключение</h3><p>Эта статья показывает как можно легко сделать микросервис для таких сервисов, как поиск, и подключить его для работы с Elasticsearch. В реальной системе вы не будете генерировать случайные данные, вы, вероятно, будете использовать webhooks или системы очередей для заполнения поиска.</p>\n<p>Источник: <a href=\"https://ryanmccue.ca/how-to-create-a-search-microservice/\" target=\"_blank\" rel=\"noopener\">ryanmccue</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjh6ocyln0000qjs6qog1fn7a","category_id":"cjh6ocymq0002qjs6ragp45cv","_id":"cjh6ocync0005qjs69f6iwimn"}],"PostTag":[{"post_id":"cjh6ocyln0000qjs6qog1fn7a","tag_id":"cjh6ocymz0003qjs6c9ufdnrf","_id":"cjh6ocynm0008qjs6bql9acsv"},{"post_id":"cjh6ocyln0000qjs6qog1fn7a","tag_id":"cjh6ocyn80004qjs69wxei2wf","_id":"cjh6ocynn0009qjs6nbl7f73q"},{"post_id":"cjh6ocyln0000qjs6qog1fn7a","tag_id":"cjh6ocyni0007qjs6y3h2phzd","_id":"cjh6ocynq000bqjs6da5h0s7s"},{"post_id":"cjh6ocyln0000qjs6qog1fn7a","tag_id":"cjh7a2i96000248s6oata6qde","_id":"cjh7a2i9j000448s6k4bvxdkr"},{"post_id":"cjh6ocyln0000qjs6qog1fn7a","tag_id":"cjh7a2i9h000348s6qg470ejp","_id":"cjh7a2i9k000548s670xq3c50"}],"Tag":[{"name":"API","_id":"cjh6ocymz0003qjs6c9ufdnrf"},{"name":"Golang","_id":"cjh6ocyn80004qjs69wxei2wf"},{"name":"Микросервим","_id":"cjh6ocynd0006qjs66miagrhn"},{"name":"Elasticsearch","_id":"cjh6ocyni0007qjs6y3h2phzd"},{"name":"Микросервис","_id":"cjh7a2i96000248s6oata6qde"},{"name":"Перевод","_id":"cjh7a2i9h000348s6qg470ejp"}]}}